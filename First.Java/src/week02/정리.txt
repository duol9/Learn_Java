week02.operator 종류
- 산술 week02.operator : +, -, /, %(나머지), <<, >>
- 비교 week02.operator : >, <, >=, <=, ==, !=
- 논리 week02.operator : &&, ||, !
- 대입 week02.operator : =, ++, --
- 기타 week02.operator : (type), ? :, instance of

week02.operator 우선 순위
- 산술 > 비교 > 논리 > 대입
- 위 우선순위에 따라서 최종적인 응답값이 결정
- 단, 괄호로 감싸주면 괄호안의 연산이 최우선순위로 계산

산술연산 시 타입 일치
- 연산 전에 피연산자의 타입이 다른 경우 타입을 일치시킴 (둘중에 저장공간 크기가 더 큰 타입으로 일치)
- 피연산자의 타입이 `int` 보다 작은 `short` 타입이면 `int`로 변환
- 피연산자의 타입이 `long` 보다 작은 `int`, `short` 타입이면 `Long`으로 변환
- 피연산자의 타입이 `float`보다 작은 `long`, `int`, `short` 타입이면 `float`으로 변환
- 피연산자의 타입이 `double` 보다 작은 `float`, `long`, `int`, `short` 타입이면 `double`으로 변환
-> 변수 여러 개를 연산했을 때 결괏값은 피연산자 중 표현 범위가 가장 큰 변수 타입을 가지게 됨

비트연산자
- Byte를 8등분 한 게 Bit
- Bit는 0,1 둘 중의 하나의 값만을 저장하는 컴퓨터가 저장(표현) 가능한 가장 작은 단위
- 컴퓨터의 가장 작은 단위인 Bit이기 때문에 연산중에서 Bit 연산이 제일 빠름
- 0,1 값으로 산술연산을 하거나, 비교 연산을 할 수 있지만 비트 연산을 통해 자릿수를 옮길 수도 있음
- Bit의 자릿수를 옮기는 것을 비트 연산
- <<(왼쪽으로 자릿수옮기기), >>(오른쪽으로 자릿수옮기기)
- 0,1 은 2진수 값이기 때문에
  -> 자릿수를 왼쪽으로 옮기는 횟수만큼 2의 배수로 곱셈이 연산되는 것과 동일
  -> 자릿수를 오른쪽으로 옮기는 횟수만큼 2의 배수로 나눗셈이 연산되는 것과 동일

  0101 -> 1010
    5      10

  1010 -> 0101
   10      5

 Collection
 List
 - 순서가 있는 데이터의 집합 -> Array
 1) List(ArrayList)
   - 동적배열 (크기가 가변적으로 늘어남)
   - 생성 시점에 작은 연속된 공간을 요청해서 참조형 변수들을 담아놓음
   - 값이 추가될 때 더 큰 공간이 필요하면 더 큰 공간을 받아서 저장하므로 상관 없음
 2) Array
   - 정적배열 (크기를 알아야 만들 수 있음)

 Linked List
  - 메모리에 남는 공간을 요청해서 여기 저기 나누어 실제 값을 담아둠
  - 실제 값이 있는 주소값으로 목록을 구성하고 저장하는 자료구조
  - 기본적 기능은 -> ArrayList와 동일
  - LinkedList는 값 -> 여기 저기 나누어서 조회하는 속도가 느림
  - 값을 추가하거나, 삭제할 때는 빠름
Stack
 - 수직으로 값을 쌓아놓고, 넣었다가 뺜다. FILO
 - push, peek, pop
 - 최근 저장된 데이터를 나열하고 싶거나, 데이터의 중복 처리를 막고 싶을 때 사용

Queue
 - FIFO

Set
 - 순서 없고, 중복 없음
 - 순서가 보장되지 않는 대신 중복을 허용하지 않도록 하는 프로그램에서 사용할 수 있는 자료구조
 - Set -> 그냥 쓸 수도 있움, 그러나, HashSet, TreeSet 등으로 응용해서 같이 사용 가능
 - Set은 생성자가 없는 대신 껍데기라서 바로 생성할 수 있움
 - 생성자가 존재하는 HashSet을 이용해서 -> Set을 구현해 볼 수 있음

Map
 - Key - Value 쌍
 - Key라는 값으로 유니크하게 보장이 돼야 함
 - Map -> HashMap, TreeMap으로 응용